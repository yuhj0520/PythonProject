# coding:'utf-8'
# 迭代器
print('--------------------迭代器--------------------')
# 从语法形式上讲，内置有__iter__方法的对象都是可迭代对象，字符串、列表、元组、字典、集合、打开的文件都是可迭代对象
t = (1, 2, 3)  # 可迭代对象，不是迭代器，需要调用内置函数iter()，或者__iter__变成迭代器
print('123'.__iter__) # str同上

print(iter(t))  # object内置对象iter，本质t.__iter__()，返回t的迭代器对象，后续可以用t进行next()操作
print(t.__iter__())
i = iter(t)
print(next(i))  # 本质就是在调用i.__next__()
print(i.__next__())
print(next(i))
# print(next(i))

'''
for循环在工作时，首先会调用可迭代对象goods内置的iter方法拿到一个迭代器对象，
然后再调用该迭代器对象的next方法将取到的值赋给item,
执行循环体完成一次循环，周而复始，直到捕捉StopIteration异常，结束迭代。
'''
goods = ['mac', 'lenovo', 'acer', 'dell', 'sony']
for item in goods:
    print(item)

'''
str对象不是一个迭代器，它是一个可迭代对象，而不是一个迭代器。
这意味着它支持迭代，但我们不能直接对其进行迭代操作。
使用内置函数，iter。它将根据一个可迭代对象返回一个迭代器对象。这里是我们如何使用它：
'''
my_string = "Yasoob"
my_iter = iter(my_string)
next(my_iter)


print('\n--------------------生成器--------------------')
# 生成器也是一种迭代器，但是你只能对其迭代一次。这是因为它们并没有把所有的值存在内存中，而是在运行时生成值。
# 生成器最佳应用场景是：你不想同一时间将所有计算出来的大量结果集分配到内存当中，特别是结果集里还包含循环
